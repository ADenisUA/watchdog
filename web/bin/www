#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web:server');
var http = require('http');
var https = require('https');
var pem = require('pem');
var fs = require('fs');
var httpProxy = require('http-proxy');
//var VIDEO_STREAM_HOST = "http://192.168.31.45";
var VIDEO_STREAM_HOST = "http://127.0.0.1";
var VIDEO_STREAM_PORT = "3001";
var APPLICATION_PORT = "3000";
//var PROXY_PORT = 8080;
var PROXY_PORT = 80;

var routes = [
  "http://127.0.0.1:"+APPLICATION_PORT,
  VIDEO_STREAM_HOST + ":" + VIDEO_STREAM_PORT
];

//pem.createCertificate({days:30, selfSigned:true}, function(err, keys) {

const httpsOptions = {
  key: fs.readFileSync('./key.pem'),
  cert: fs.readFileSync('./cert.pem')
}

var proxy = httpProxy.createProxyServer(
    {ssl: {
      key: httpsOptions.key,
      cert: httpsOptions.cert}});

var proxyServer = https.createServer({key: httpsOptions.key, cert: httpsOptions.cert}, function (req, res) {
  var route = 0;
  if (req.url.indexOf("stream/video.mjpeg") > -1) {
    route = 1;
  }

  proxy.web(req, res, {target: routes[route]});
});

proxyServer.on('upgrade', function (req, socket, head) {
  proxy.ws(req, socket, head, {target: routes[1]});
});

proxyServer.listen(PROXY_PORT, "127.0.0.1");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || APPLICATION_PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
//});
