#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

var isProduction = false;

process.argv.forEach(function (val, index, array) {
    console.log(index + ': ' + val);
    if (val == "isProduction=true") {
        isProduction = true;
    }
});

app.set('port', HTTPS_PORT);

var httpServer =  null;
var httpsServer =  null;

if (isProduction) {
    var HTTP_PORT = 80;
    var HTTPS_PORT = 443;

    // These are the changes that I made:
    //
    //     sudo setcap 'cap_net_bind_service=+ep' /usr/local/bin/node

    var leStore = require('le-store-certbot').create({
        configDir: '~/letsencrypt/etc',          // or /etc/letsencrypt or wherever
        privkeyPath: ':configDir/live/:hostname/privkey.pem',          //
        fullchainPath: ':configDir/live/:hostname/fullchain.pem',      // Note: both that :configDir and :hostname
        certPath: ':configDir/live/:hostname/cert.pem',                //       will be templated as expected by
        chainPath: ':configDir/live/:hostname/chain.pem',              //       node-letsencrypt
        workDir: '~/letsencrypt/var/lib',
        logsDir: '~/letsencrypt/var/log',
        webrootPath: '~/letsencrypt/srv/www/:hostname/.well-known/acme-challenge'
    });

    ///root/letsencrypt/etc/live/findreview.info

    // returns an instance of node-greenlock with additional helper methods
    var lex = require('greenlock-express').create({
        // set to https://acme-v01.api.letsencrypt.org/directory in production
        server: 'https://acme-v01.api.letsencrypt.org/directory'

        // If you wish to replace the default plugins, you may do so here
        //
        , challenges: {'http-01': require('le-challenge-fs').create({ webrootPath: '~/letsencrypt/var/acme-challenges' })}
        , store: leStore

        // You probably wouldn't need to replace the default sni handler
        // See https://git.daplie.com/Daplie/le-sni-auto if you think you do
        //, sni: require('le-sni-auto').create({})

        , approveDomains: approveDomains
    });

    function approveDomains(opts, certs, cb) {
        // This is where you check your database and associated
        // email addresses with domains and agreements and such


        // The domains being approved for the first time are listed in opts.domains
        // Certs being renewed are listed in certs.altnames
        if (certs) {
            opts.domains = certs.altnames;
        }
        else {
            opts.email = 'adenisua@gmail.com';
            opts.agreeTos = true;
        }

        // NOTE: you can also change other options such as `challengeType` and `challenge`
        // opts.challengeType = 'http-01';
        // opts.challenge = require('le-challenge-fs').create({});

        cb(null, {options: opts, certs: certs});
    };

    // handles acme-challenge and redirects to https
    httpServer =require('http').createServer(lex.middleware(require('redirect-https')())).listen(HTTP_PORT, function () {
        console.log("Listening for ACME http-01 challenges on", this.address());
    });

    // handles your app
    httpsServer = require('https').createServer(lex.httpsOptions, lex.middleware(app)).listen(HTTPS_PORT, function () {
        console.log("Listening for ACME tls-sni-01 challenges and serve app on", this.address());
    });
} else {
    var HTTPS_PORT = 8080;

    var httpsOptions = require('localhost.daplie.me-certificates').create();

    httpsServer = https.createServer(httpsOptions, app);
    httpsServer.listen(HTTPS_PORT);
    httpsServer.on('error', function(error) {
        onError(error, HTTPS_PORT);
    });
    httpsServer.on('listening', function() {
        onListening(httpsServer);
    });
}

function onError(error, port) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(port + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(port + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening(server) {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}